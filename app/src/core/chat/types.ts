import { To } from "react-router-dom";
import { MessageTree } from "./message-tree";


export interface MidjourneyMessageOption {
    type: number;
    style: number;
    label: string;
    custom: string;
}

export interface MidjourneyMessage {
    uri: string;
    progress: string;
    id?: string;
    hash?: string;
    flags?: number;
    options?: MidjourneyMessageOption[];
    descriptions?: string[];
}

export interface MidjourneyParameters {
    midjourneyMethod: string;
    id?: string;
    uri?: string;
    hash?: string;
    index?: number;
    flags?: number;
    level?: string;
}

export interface DalleImageObject {
    b64_json?: string;
    url?: string;
    revised_prompt?: string;
}

export interface DalleImageList {
    created: number;
    data: DalleImageObject[];
}

export interface Dalle3Message {
    images?: DalleImageList;
    error?: string;
}

export interface Dalle3Parameters {
    format: "portrait" | "landscape" | "square";
    style: "vivid" | "natural";
    quality: "standard" | "hd";
    prompt: string;
}

export interface TarotParameters {
    game: string;
    card1: string;
    card2: string;
    card3: string;
    card4?: number;
    card5?: number;
    lang: string;
    prompt: string;
}

export interface GHParameters {
    slug: string;
    lang: string;
    userNatalSign: number;
    userRisingSign: number;
    prompt: string;
}



export interface Parameters {
    temperature: number;
    apiKey?: string;
    initialSystemPrompt?: string;
    model: string;
    wengoplusmode?: boolean;
    midjourney?: boolean;
    midjourneyParameters?: MidjourneyParameters;
    tarot?: boolean;
    tarotParameters?: TarotParameters;
    gh?: boolean;
    ghParameters?: GHParameters;
    dalle3?: boolean;
    dalle3Parameters?: Dalle3Parameters;
}
const tools =[
    { 
        'type': 'function',
        'function': {
            'description': 'This tool manages all interactions with Graam ( aka Wephone ). You can ask it for any information about Graam\'s database',
            'name': 'graam-tool',
            'parameters': {
                "type": "object",
                "properties" : {
                    "question" : {
                        'description': "The question to ask about Graam ( aka Wephone ) 's database",
                        'type': 'string'
                    }
                },
                "required": ["question"]
            }
        }
    }
]

export interface ToolParameter {
    description: string;
    type: string;
  }

export interface ToolParameters {
    type: string; // "object"
    properties: {
        [key: string]: ToolParameter ;
    };
    required: string[];
}

export interface ToolFunction {
    description: string;
    name: string;
    parameters: ToolParameters
}

export interface ToolMessage {
    content: string;
    tool_call_id: string; // tool call this message is responding to
}

export interface ToolCall {
    id: string; // id of the tool call
    type: string; // only "function" now
    function: {
        name: string; // name of the function to call
        arguments: string  // The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    };
}

export interface Message {
    id: string;
    chatID: string;
    parentID?: string;
    timestamp: number;
    role: string;
    model?: string;
    content: string;
    images?: string[];
    callableTools?: ToolFunction[]; // The tools the model can call
    toolCalls?: ToolCall[];         // The model requires to call these tools
    toolMessage?: ToolMessage;      // response from one called tool
    parameters?: Parameters;
    done?: boolean;
}

export interface UserSubmittedMessage {
    chatID: string;
    parentID?: string;
    content: string;
    images?: string[];
    callableTools?: ToolFunction[];
    requestedParameters: Parameters;
}

export interface OpenAIFunctionCall {
    name: string
    arguments: string
}

export interface OpenAIToolCall {
    index: number;
    id: string,
    type: string,
    function: OpenAIFunctionCall
}

export interface OpenAIMessage {
    role: string;
    content: string;
    images?: string[];
    callable_tools?: ToolFunction[] ; // callable tools
    tool_calls?: ToolCall[];          // tools to invoke
    tool_message?: ToolMessage;     // response from tools invocation
}

export function getOpenAIMessageFromMessage(message: Message): OpenAIMessage {
    
    let base_message: OpenAIMessage = {
        role: message.role,
        content: message.content,
        images: message.images,
        callable_tools: message.callableTools,
        tool_calls: message.toolCalls,
        tool_message: message.toolMessage
     }

    return base_message;
}

export interface Chat {
    id: string;
    messages: MessageTree;
    metadata?: Record<string, any>;
    pluginOptions?: Record<string, any>;
    title?: string | null;
    created: number;
    updated: number;
    deleted?: boolean;
}

export function serializeChat(chat: Chat): string {
    return JSON.stringify({
        ...chat,
        messages: chat.messages.serialize(),
    });
}

export function deserializeChat(serialized: string) {
    const chat = JSON.parse(serialized);
    chat.messages = new MessageTree(chat.messages);
    return chat as Chat;
}